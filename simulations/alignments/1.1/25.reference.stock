# STOCKHOLM 1.0
#=GF NH         ((X:1,Y:1):1,Z:1.1)root;
#=GF ARGS       -seed 1238430063 -sub /nfs/dart/grammars/pfold.eg -sroot -looplen 5 -stemlen 2.33333333333333 -pstem 0.1 /tmp/evolsayer_tree.newick
#=GF SEED       1238430063
#=GF PARAM      stem_prob=0.1 subfile=/nfs/dart/grammars/pfold.eg loop_length=5 stem_length=2.33333333333333
#=GF PARAM      lambda_loop=0.025 mu_loop=0.03 lambda_stem=0.007 mu_stem=0.01
#=GF ROOT       S-gc-cg-L-g-g-u-a-u-S(ug-cg-gu-au-gc-gc-cg-au-gc-L-a-u-c-u-c-S(cg-ua-au-L-u-a-u-a-c-c-a-u)a)g
#=GF BRANCH     Length 1.  Loop insert: u(1).  Subst to a: c(1), g(1), u(2).  Subst to au: gc(1), ua(1).  Subst to c: u(5).  Subst to cg: ua(1), ug(1).  Subst to g: a(2).  Subst to gc: cg(1), gu(2).  Subst to gu: au(2).  Subst to u: a(4), c(5).  Subst to ua: au(1), cg(1), gc(1).  (root -> node1)
#=GF NODE       S-gc-ua-L-g-g-a-u-u-S(au-cg-gc-au-gc-ua-cg-gc-gc-L-u-u-c-u-c-S(cg-cg-gu-L-u-a-u-g-a-u-c-u-a)a)g
#=GF BRANCH     Length 1.  Loop delete: c(1).  Loop insert: a(1), g(1), u(1).  Stem insert: au(1).  Subst to a: c(2), g(2), u(3).  Subst to au: gc(1), gu(1).  Subst to c: u(5).  Subst to cg: ua(2), ug(1).  Subst to g: a(3), c(1), u(2).  Subst to gc: au(1).  Subst to u: a(1), g(2).  Subst to ua: au(1).  Subst to ug: cg(1).  (node1 -> X)
#=GF LEAF       S-au-cg-L-a-g-g-c-a-S(gc-cg-gc-ua-gc-cg-cg-gc-gc-L-g-a-a-D-u-c-S(cg-cg-au-au-L-g-a-g-c-u-a-c-a-u-g)a-g)a
#=GF BRANCH     Length 1.  Loop delete: a(1).  Loop insert: g(1), u(1).  Subst to a: c(2), g(2), u(1).  Subst to au: cg(2), gc(3), ua(1).  Subst to c: a(2), g(1), u(5).  Subst to cg: gc(2), gg(1), gu(1).  Subst to g: a(2), c(2), u(1).  Subst to gc: au(4), cg(2), ua(1).  Subst to gg: gu(1).  Subst to gu: gc(1).  Subst to u: a(1), c(3), g(1).  Subst to ua: au(1), gc(1).  (node1 -> Y)
#=GF LEAF       S-cg-au-L-g-a-u-g-c-c-g-S(ua-gc-ua-cg-au-gc-gc-gc-cg-L-u-I-u-c-a-u-S(cg-gc-au-I-L-c-I-u-a-g-g-u-g-u-a)D-I)c
#=GF BRANCH     Length 1.1.  Subst to a: c(1), g(2), u(2).  Subst to au: gu(1).  Subst to c: a(1), g(1), u(4).  Subst to cg: gc(1), ua(1).  Subst to g: a(2), u(2).  Subst to gc: au(1).  Subst to gu: au(1), gc(1).  Subst to u: a(1), c(3), g(2).  Subst to ua: au(1), cg(1), ug(1), uu(1).  Subst to uc: gc(1).  Subst to uu: gu(1).  (root -> Z)
#=GF LEAF       S-gc-cg-L-a-I-a-a-a-I-c-S(ua-cg-cg-au-cg-gc-ua-ua-uc-L-g-I-u-c-g-u-S(cg-ua-gu-I-L-c-I-c-u-I-a-u-c-a-a)c-I)u
#=GF ANCSTEMS   3 (total) 3 (nonempty)
#=GF ANCSTEMLEN 3 9 2
#=GF ANCLOOPLEN 8 6 6
root            gcg-gua-uucgaggcaga-ucuccua-u-au-accau-uaga-cugccuuggggc
#=GR root SS    <<-------<<<<<<<<<------<<<------------>>>-->>>>>>>>>->>
node1           gug-gau-uacgagucggu-ucucccg-u-augaucua-ugga-ccgacucgugac
#=GR node1 SS   <<-------<<<<<<<<<------<<<------------>>>-->>>>>>>>>->>
X               aca-ggc-agcgugccgggaa-ucccaagagcuacauguuggagccggcacgcagu
#=GR X SS       <<-------<<<<<<<<<------<<<<---------->>>>-->>>>>>>>>->>
Y               cagaugccgugucagggcu-ucaucga-c-uaggugua-ucg--gcccugacacug
#=GR Y SS       <<-------<<<<<<<<<------<<<------------>>>-->>>>>>>>>->>
Z               gca-aaa-cuccacguuug-ucgucug-c-cu-aucaa-uagc-caacguggaugc
#=GR Z SS       <<-------<<<<<<<<<------<<<------------>>>-->>>>>>>>>->>
#=GC SS_cons    <<.......<<<<<<<<<......<<<<..........>>>>..>>>>>>>>>.>>
//
